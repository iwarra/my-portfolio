{
  "title": "All the ways to pass data in Vue.js",
  "date": "2023-09-12",
  "category": [
    "Vue"
  ],
  "body": "**Props – Sending data from parent to child**\n\nIf you need to send a value from parent to child component then props are the way to go. They can be of different types (string, number,…) and you can do type validation to avoid potential errors. When the value of the prop changes in the parent component, it will be passed down to its children. Yes, a prop can be passed down to more child components. The children can however not change the prop as we want to avoid mutating the parent’s state. So the binding is one-sided.\n\n**Provide / Inject – Sending data without prop drilling**\n\nSending data from a component that is high in the component tree to a deeply nested child can get tricky. If we do this with props then we need to pass the prop from component 1 to component 2,  from component 2 to component 3, and all the way till we reach our destination. That can take quite a few steps and is known as prop drilling. To avoid it, and the confusion that it might bring,  we have the provide/inject option. Inside the parent, we will have the provide function that accepts two arguments.\n\n```\nprovide( injection key, provided value)\n```\n\nTo get the data provided by the ancestor we use the inject function.\n\n```\nconst injectedValue = inject( injection key )\n```\n\nYou can use this to send data directly from your App.vue file and you can have multiple values provided with different keys for differentiation. It can be used with refs, just keep in mind that they are not automatically unwrapped (so use the properties like .value when needed).\n\n**Custom events – Sending info from child to parent component**\n\nSo far it was the parent sending values, but what if we need to send info up the component tree? That’s where the custom events come into place. The child can communicate with the parent by triggering an event that the parent will then listen to.\n\nInside the child we will need to define emit and use it where needed:\n\n```\nconst emit = defineEmits([‘close’]);\n```\n\n```\nfunction handleLogOut() {  userStore.resetUsername();  userStore.setLogIn(false);  localStorage.removeItem(“user”);  emit(“close”);   //close the menu on log out};\n```\n\nInside the parent, we call the event:\n\n```\n<UserMenu @close=”closeDropdown” />  //calls the function closeDropdown that is defined in the parent component\n```\n\nIn the example I took from my own project, I’m not passing any info, but emit accepts two parameters – the first one is the event name and the second one is data that we can pass up.\n\n**State management – Sharing info in a larger project**\n\nWhen scaling up it can be hard to keep track of all the data being sent and that’s where stores come into the picture. Using state management like Pinia or Vuex can really make your life easier. Defining stores that can manage data and the functionality around them makes Vue so much easier to use.",
  "excerpt": "All the ways to pass data in Vue.js - from parent component to child and the other way around. "
}